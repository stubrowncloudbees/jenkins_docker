currentBuild.displayName = "#" + currentBuild.number + " - " + env.BRANCH_NAME

if (env.BRANCH_NAME == "master") {
    env.ENV_SUFFIX = ""
} else {
    env.ENV_SUFFIX = ".qa"
}
echo "the branch name is " + env.BRANCH_NAME
env.DOCKER_VERSION = env.BRANCH_NAME.replaceAll("/", ".") + ".${BUILD_NUMBER}" + env.ENV_SUFFIX
env.DOCKER_IMAGE = "stuartcbrown/jentest:${DOCKER_VERSION}"
def dockerImageName = ''

echo "The DOCKER_VERSION: " + env.DOCKER_VERSION

pipeline {
    agent { 
        node {
            label 'gen-docker' 
        }
    }

    stages {
        stage('Build'){
            steps {
                container('docker'){
                    script (){
                        docker.withRegistry('https://registry.hub.docker.com','docker_creds') {
                        //withCredentials([usernamePassword(credentialsId: 'docker_creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            //sh "docker login -u ${USERNAME} -p ${PASSWORD}"
                            sh 'rm -rf build.name'
                            sh "echo '$DOCKER_IMAGE' > build.name"
                            dockerImageName = readFile('build.name').trim()
                            echo "Docker image nane is ${dockerImageName}"
                            def dockerImage = docker.build(dockerImageName, ".")
                            //sh "docker build -t ${dockerImageName} ."
                            echo "running"
                           
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            container('docker'){
                    withDockerRegistry([ credentialsId: "docker_creds", url: "https://registry.hub.docker.com" ]) {
                        //sh 'echo pushing'
                        sh 'docker push stuartcbrown/jentest:master.15mst'
                    }
            }
        }
        unstable {
            echo 'UNSTABLE'
        }
        failure {
            container('docker'){
                echo 'FAILED'
                sh "docker rmi ${dockerImageName}"
                mail bcc: '', body: currentBuild.displayName, cc: '', from: "Blah", replyTo: '', subject: currentBuild.displayName + ' Failed', to: 'sbrown@cloudbees.com'
            }
        }
        always {
            echo 'DONE'
        }
    }
}
